/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kunal.libraryservice.api;

import com.kunal.libraryservice.models.InlineResponse200;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-04T10:33:33.915+05:30[Asia/Calcutta]")
@Validated
@Api(value = "mutationgroups", description = "the mutationgroups API")
public interface MutationgroupsApi {

    default MutationgroupsApiDelegate getDelegate() {
        return new MutationgroupsApiDelegate() {};
    }

    /**
     * GET /mutationgroups/{mutationGroupId}/communications : Sending communication doc to user
     * Create Communication doc functionality
     *
     * @param mutationGroupId The Mutation GroupId (required)
     * @param policyUUID PolicyUUIDto fetch response data (required)
     * @return Successful operation (status code 200)
     *         or Invalid PolicyUUID supplied (status code 400)
     *         or Details not found (status code 404)
     */
    @ApiOperation(value = "Sending communication doc to user", nickname = "communicationDoc", notes = "Create Communication doc functionality", response = InlineResponse200.class, tags={ "communicationDoc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Invalid PolicyUUID supplied"),
        @ApiResponse(code = 404, message = "Details not found") })
    @GetMapping(
        value = "/mutationgroups/{mutationGroupId}/communications",
        produces = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> communicationDoc(@ApiParam(value = "The Mutation GroupId",required=true) @PathVariable("mutationGroupId") Integer mutationGroupId,@NotNull @ApiParam(value = "PolicyUUIDto fetch response data", required = true) @Valid @RequestParam(value = "policyUUID", required = true) String policyUUID) {
        return getDelegate().communicationDoc(mutationGroupId, policyUUID);
    }

}
